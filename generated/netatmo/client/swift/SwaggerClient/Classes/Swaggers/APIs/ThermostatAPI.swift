//
// ThermostatAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class ThermostatAPI: APIBase {
    
        /**
         
         - POST /api/createnewschedule
         - The method createnewschedule creates a new schedule stored in the backup list.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token
         - parameter deviceId: (query) The relay id
         - parameter moduleId: (query) The thermostat id
         - parameter thermProgram: (body) The thermostat program (zones and timetable)

         - returns: RequestBuilder<NANewScheduleResponse> 
         */
        public class func createnewschedule(accessToken accessToken: String, deviceId: String, moduleId: String, thermProgram: NAThermProgram) -> RequestBuilder<NANewScheduleResponse> {
            let path = "/api/createnewschedule"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = thermProgram.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<NANewScheduleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /api/devicelist
         - The method devicelist returns the list of devices owned by the user, and their modules.\nA device is identified by its _id (which is its mac address) and each device may have one, several or no modules, also identified by an _id.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token
         - parameter appType: (query) Defines which device type will be returned by devicelist. It could be app_thermostat or app_station (by default if not provided)
         - parameter deviceId: (query) Specify a device_id if you want to retrieve only this device informations.
         - parameter getFavorites: (query) When set to \&quot;true\&quot;, the favorite devices of the user are returned. This flag is available only if the devices requested are Weather Stations.

         - returns: RequestBuilder<NADeviceListResponse> 
         */
        public class func devicelist(accessToken accessToken: String, appType: String?, deviceId: String?, getFavorites: Bool?) -> RequestBuilder<NADeviceListResponse> {
            let path = "/api/devicelist"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "appType": appType,
                "deviceId": deviceId,
                "getFavorites": getFavorites
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<NADeviceListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /api/getmeasure
         - The method getmeasure returns the measurements of a device or a module.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token
         - parameter deviceId: (query) Id of the device whose module&#39;s measurements you want to retrieve. This _id can be found in the user&#39;s devices field.
         - parameter scale: (query) Defines the time interval between two measurements.\nPossible values :\nmax -&gt; every value stored will be returned\n30min -&gt; 1 value every 30 minutes\n1hour -&gt; 1 value every hour\n3hours -&gt; 1 value every 3 hours\n1day -&gt; 1 value per day\n1week -&gt; 1 value per week\n1month -&gt; 1 value per month
         - parameter type: (query) Sets the type of measurement you want to retrieve.\nThe different types of measurements must be given in a comma separated list of strings.\nExample: type=\&quot;Temperature,Humidity\&quot;\nDepending on the device&#39;s type and the scale, different measurements are available:\nFor Weather Station :\n\n  max -&gt; Temperature, CO2, Humidity, Pressure, Noise, Rain (if\nmodule_id is a rain sensor)\n\n  30min, 1hour, 3hours -&gt; Temperature, CO2, Humidity, Pressure,\nNoise, min_temp, max_temp, min_hum, max_hum, min_pressure, max_pressure, min_noise, max_noise, sum_rain (if module_id is a rain sensor)\n\n  1day, 1week, 1month -&gt; Temperature, Co2, Humidity, Pressure, Noise,\nmin_temp, date_min_temp, max_temp, date_max_temp, min_hum, date_min_hum, max_hum, date_max_hum, min_pressure, date_min_pressure, max_pressure, date_max_pressure, min_noise, date_min_noise, max_noise, date_max_noise, date_min_co2, date_max_co2, sum_rain (if module_id is a rain sensor)\nPlease note, the measurements sent in the response will be in the same order as in this list.\nAll measurements are expressed in metric units:\n\n  Temperature: Celsius\n\n  Humidity: %\n\n  Co2: ppm\n\n  Pressure: mbar\n\n  Noise: db\n\n  Rain: mm\n\nFor Thermostat:\n\n  max -&gt; Temperature, Sp_Temperature, BoilerOn, BoilerOff\n\n  30min, 1hour, 3hours -&gt; Temperature, Sp_Temperature, min_temp,\nmax_temp, sum_boiler_on, sum_boiler_off\n\n  1day, 1week, 1month -&gt; Temperature, min_temp, date_min_temp,\nmax_temp, sum_boiler_on, sum_boiler_off\n\n  where\n\nTemperature: Celsius\n\n  Sp_Temperature (temperature setpoint): Celsius\n\n  BoilerOn: Duration, since the previous data point, during which the\nboiler has been on (in seconds)\n\n  BoilerOff : Duration, since the previous data point, during which\nthe boiler has been off (in seconds).\n\n  sum_boiler_on: Total duration during which the boiler has been on,\nat a specific scale (in seconds).\n\n  sum_boiler_off: Total duration during which the boiler has been\noff, at a specific scale (in seconds).
         - parameter moduleId: (query) If you don&#39;t specify any module_id you will retrieve the device&#39;s measurements. If you specify a module_id you will retrieve the module&#39;s measurements.
         - parameter dateBegin: (query) Starting timestamp (utc) of the requested measurements.\nPlease note measurement retrieving is limited to 1024 measurements.
         - parameter dateEnd: (query) Ending timestamp (utc) of the request measurements.\nIf you want only the last measurement, do not provide date_begin, and set date_end to \&quot;last\&quot;.
         - parameter limit: (query) Limits the number of measurements returned (default &amp; max is 1024)
         - parameter optimize: (query) Allows you to choose the format of the answer.\nIf you build a mobile app and bandwith usage is an issue, use optimize = true.\nUse optimize = false, for an easier parse. In this case, values are indexed by sorted timestamp.\nExample of un-optimized response :\n{\&quot;status\&quot;: \&quot;ok\&quot;, \n  \&quot;body\&quot;: {\n    \&quot;1347575400\&quot;: [18.3,39],\n    \&quot;1347586200\&quot;: [20.6,48]\n  },\n\&quot;time_exec\&quot;: 0.012136936187744}\nIf optimize is set true, measurements are returned as an array of series of regularly spaced measurements. Each series is defined by a beginning time beg_time and a step between measurements, step_time:\n{\&quot;status\&quot;: \&quot;ok\&quot;,\n  \&quot;body\&quot;: [\n    {\&quot;beg_time\&quot;: 1347575400,\n     \&quot;step_time\&quot;: 10800,\n     \&quot;value\&quot;: \n        [[18.3,39],\n        [ 20.6,48]]\n    }],\n\&quot;time_exec\&quot;: 0.014238119125366}\nDefault value is true.
         - parameter realTime: (query) In scales higher than max, since the data is aggregated, the timestamps returned are by default offset by +(scale/2).\nFor instance, if you ask for measurements at a daily scale, you will receive data timestamped at 12:00 if real_time is set to false (default case), and timestamped at 00:00 if real_time is set to true.\nNB : The servers always store data with real_time set to true and data are offset by this parameter AFTER having being time-filtered, thus you could have data after date_end if real_time is set to false.

         - returns: RequestBuilder<NAMeasureResponse> 
         */
        public class func getmeasure(accessToken accessToken: String, deviceId: String, scale: String, type: [String], moduleId: String?, dateBegin: Int?, dateEnd: Int?, limit: Int?, optimize: Bool?, realTime: Bool?) -> RequestBuilder<NAMeasureResponse> {
            let path = "/api/getmeasure"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "deviceId": deviceId,
                "moduleId": moduleId,
                "scale": scale,
                "type": type,
                "dateBegin": dateBegin,
                "dateEnd": dateEnd,
                "limit": limit,
                "optimize": optimize,
                "realTime": realTime
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<NAMeasureResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /api/getthermstate
         - The method getthermstate returns the last Thermostat measurements, its current weekly schedule, and, if present, its current manual temperature setpoint.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token
         - parameter deviceId: (query) The relay id
         - parameter moduleId: (query) The thermostat id

         - returns: RequestBuilder<NAThermStateResponse> 
         */
        public class func getthermstate(accessToken accessToken: String, deviceId: String, moduleId: String) -> RequestBuilder<NAThermStateResponse> {
            let path = "/api/getthermstate"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "deviceId": deviceId,
                "moduleId": moduleId
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<NAThermStateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /api/getuser
         - The method getuser returns information about a user such as prefered language, prefered units, and list of devices.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token

         - returns: RequestBuilder<NAUserResponse> 
         */
        public class func getuser(accessToken accessToken: String) -> RequestBuilder<NAUserResponse> {
            let path = "/api/getuser"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<NAUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - POST /api/setthermpoint
         - The method setthermpoint changes the Thermostat manual temperature setpoint.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token
         - parameter deviceId: (query) The relay id
         - parameter moduleId: (query) The thermostat id
         - parameter setpointMode: (query) Chosen setpoint_mode
         - parameter setpointEndtime: (query) When using the manual or max setpoint_mode, this parameter defines when the setpoint expires.
         - parameter setpointTemp: (query) When using the manual setpoint_mode, this parameter defines the temperature setpoint (in Celcius) to use.

         - returns: RequestBuilder<NAOkResponse> 
         */
        public class func setthermpoint(accessToken accessToken: String, deviceId: String, moduleId: String, setpointMode: String, setpointEndtime: Int?, setpointTemp: Float?) -> RequestBuilder<NAOkResponse> {
            let path = "/api/setthermpoint"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "deviceId": deviceId,
                "moduleId": moduleId,
                "setpointMode": setpointMode,
                "setpointEndtime": setpointEndtime,
                "setpointTemp": setpointTemp
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<NAOkResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - POST /api/switchschedule
         - The method switchschedule switches the Thermostat's schedule to another existing schedule.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token
         - parameter deviceId: (query) The relay id
         - parameter moduleId: (query) The thermostat id
         - parameter scheduleId: (query) The schedule id. It can be found in the getthermstate response, under the keys \&quot;therm_program_backup\&quot; and \&quot;therm_program\&quot;.

         - returns: RequestBuilder<NAOkResponse> 
         */
        public class func switchschedule(accessToken accessToken: String, deviceId: String, moduleId: String, scheduleId: String) -> RequestBuilder<NAOkResponse> {
            let path = "/api/switchschedule"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "deviceId": deviceId,
                "moduleId": moduleId,
                "scheduleId": scheduleId
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<NAOkResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - POST /api/syncschedule
         - The method syncschedule changes the Thermostat weekly schedule.
         - examples: [{contentType=application/json, example=""}]
         
         - parameter accessToken: (query) Your access token
         - parameter deviceId: (query) The relay id
         - parameter moduleId: (query) The thermostat id
         - parameter thermProgram: (body) The thermostat program (zones, timetable and name)

         - returns: RequestBuilder<NAOkResponse> 
         */
        public class func syncschedule(accessToken accessToken: String, deviceId: String, moduleId: String, thermProgram: NAThermProgram) -> RequestBuilder<NAOkResponse> {
            let path = "/api/syncschedule"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = thermProgram.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<NAOkResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
