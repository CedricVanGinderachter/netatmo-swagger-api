//
// NAModule.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class NAModule: JSONEncodable {

    public var _id: String?
    public var date_setup: NADate?
    public var firmware: Int?
    /** Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module */
    public var type: String?
    public var module_name: String?
    public var main_device: String?
    public var last_message: Int?
    public var last_seen: Int?
    public var public_ext_data: Bool?
    /** \&quot;It contains the current radio status. The different thresholds to take into account are :\&quot; |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60 */
    public var rf_status: Int?
    /** It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n\&quot;Indoor module Battery range: 6000 ... 4200\&quot; |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n\&quot;Below 4560: very low\&quot; |\n  \n\&quot;Raingauge and outdoor module Battery range: 6000 ... 3600\&quot; |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n\&quot;Below 4000: very low\&quot; |\n  \n\&quot;Thermostat Battery range: 4500 ... 3000\&quot; |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\&quot;Below 3000: very low\&quot; */
    public var battery_vp: Int?
    public var therm_orientation: Int?
    public var therm_relay_cmd: Int?
    /** It contains all the measurements that can be displayed on the dashboard */
    public var dashboard_data: NADashboardData?
    public var data_type: [String]?
    

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["_id"] = self._id
        nillableDictionary["date_setup"] = self.date_setup?.encodeToJSON()
        nillableDictionary["firmware"] = self.firmware
        nillableDictionary["type"] = self.type
        nillableDictionary["module_name"] = self.module_name
        nillableDictionary["main_device"] = self.main_device
        nillableDictionary["last_message"] = self.last_message
        nillableDictionary["last_seen"] = self.last_seen
        nillableDictionary["public_ext_data"] = self.public_ext_data
        nillableDictionary["rf_status"] = self.rf_status
        nillableDictionary["battery_vp"] = self.battery_vp
        nillableDictionary["therm_orientation"] = self.therm_orientation
        nillableDictionary["therm_relay_cmd"] = self.therm_relay_cmd
        nillableDictionary["dashboard_data"] = self.dashboard_data?.encodeToJSON()
        nillableDictionary["data_type"] = self.data_type?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
