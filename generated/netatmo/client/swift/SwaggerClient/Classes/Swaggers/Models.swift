// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.dateFromString(sourceString) {
                        return date
                    }
                }
                fatalError("formatter failed to parse \(sourceString)")
            } 

			// Decoder for AccessToken
            Decoders.addDecoder(clazz: AccessToken.self) { (source: AnyObject) -> AccessToken in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AccessToken()
                instance.access_token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"])
                instance.refresh_token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refresh_token"])
                instance.expire_in = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["expire_in"])
                instance.expires_in = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["expires_in"])
                instance.scope = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["scope"])
                return instance
            }
			

			// Decoder for NAResponse
            Decoders.addDecoder(clazz: NAResponse.self) { (source: AnyObject) -> NAResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAResponse()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                return instance
            }
			

			// Decoder for NAOkResponse
            Decoders.addDecoder(clazz: NAOkResponse.self) { (source: AnyObject) -> NAOkResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAOkResponse()
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for NAUserResponse
            Decoders.addDecoder(clazz: NAUserResponse.self) { (source: AnyObject) -> NAUserResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAUserResponse()
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.body = Decoders.decodeOptional(clazz: NAUserBody.self, source: sourceDictionary["body"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for NADeviceListResponse
            Decoders.addDecoder(clazz: NADeviceListResponse.self) { (source: AnyObject) -> NADeviceListResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NADeviceListResponse()
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.body = Decoders.decodeOptional(clazz: NADeviceListBody.self, source: sourceDictionary["body"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for NAMeasureResponse
            Decoders.addDecoder(clazz: NAMeasureResponse.self) { (source: AnyObject) -> NAMeasureResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAMeasureResponse()
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.body = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["body"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for NAThermStateResponse
            Decoders.addDecoder(clazz: NAThermStateResponse.self) { (source: AnyObject) -> NAThermStateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAThermStateResponse()
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.body = Decoders.decodeOptional(clazz: NAThermStateBody.self, source: sourceDictionary["body"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for NANewScheduleResponse
            Decoders.addDecoder(clazz: NANewScheduleResponse.self) { (source: AnyObject) -> NANewScheduleResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NANewScheduleResponse()
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.body = Decoders.decodeOptional(clazz: NANewScheduleBody.self, source: sourceDictionary["body"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for NAPartnerDevicesResponse
            Decoders.addDecoder(clazz: NAPartnerDevicesResponse.self) { (source: AnyObject) -> NAPartnerDevicesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAPartnerDevicesResponse()
                instance.time_server = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_server"])
                instance.time_exec = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["time_exec"])
                instance.body = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["body"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for NAUserBody
            Decoders.addDecoder(clazz: NAUserBody.self) { (source: AnyObject) -> NAUserBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAUserBody()
                instance._id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.administrative = Decoders.decodeOptional(clazz: NAUserAdministrative.self, source: sourceDictionary["administrative"])
                instance.date_creation = Decoders.decodeOptional(clazz: NADate.self, source: sourceDictionary["date_creation"])
                instance.devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["devices"])
                instance.friend_devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["friend_devices"])
                instance.mail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mail"])
                instance.timeline_not_read = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timeline_not_read"])
                instance.timeline_size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timeline_size"])
                return instance
            }
			

			// Decoder for NADeviceListBody
            Decoders.addDecoder(clazz: NADeviceListBody.self) { (source: AnyObject) -> NADeviceListBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NADeviceListBody()
                instance.devices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["devices"])
                instance.modules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["modules"])
                return instance
            }
			

			// Decoder for NAMeasureBodyElem
            Decoders.addDecoder(clazz: NAMeasureBodyElem.self) { (source: AnyObject) -> NAMeasureBodyElem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAMeasureBodyElem()
                instance.beg_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["beg_time"])
                instance.step_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["step_time"])
                instance.value = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for NAThermStateBody
            Decoders.addDecoder(clazz: NAThermStateBody.self) { (source: AnyObject) -> NAThermStateBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAThermStateBody()
                instance.setpoint = Decoders.decodeOptional(clazz: NASetpoint.self, source: sourceDictionary["setpoint"])
                instance.setpoint_order = Decoders.decodeOptional(clazz: NASetpoint.self, source: sourceDictionary["setpoint_order"])
                instance.therm_program = Decoders.decodeOptional(clazz: NAThermProgram.self, source: sourceDictionary["therm_program"])
                instance.therm_program_backup = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["therm_program_backup"])
                instance.therm_program_order = Decoders.decodeOptional(clazz: NAThermProgram.self, source: sourceDictionary["therm_program_order"])
                instance.therm_orientation = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["therm_orientation"])
                instance.therm_relay_cmd = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["therm_relay_cmd"])
                instance.battery_vp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["battery_vp"])
                instance.rf_status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["rf_status"])
                instance.plug_connected_boiler = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["plug_connected_boiler"])
                instance.udp_conn = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["udp_conn"])
                instance.last_therm_seen = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_therm_seen"])
                instance.last_plug_seen = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_plug_seen"])
                instance.wifi_status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["wifi_status"])
                instance.measured = Decoders.decodeOptional(clazz: NAThermMeasure.self, source: sourceDictionary["measured"])
                return instance
            }
			

			// Decoder for NANewScheduleBody
            Decoders.addDecoder(clazz: NANewScheduleBody.self) { (source: AnyObject) -> NANewScheduleBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NANewScheduleBody()
                instance.schedule_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["schedule_id"])
                return instance
            }
			

			// Decoder for NAUserAdministrative
            Decoders.addDecoder(clazz: NAUserAdministrative.self) { (source: AnyObject) -> NAUserAdministrative in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAUserAdministrative()
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.lang = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lang"])
                instance.reg_locale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reg_locale"])
                instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"])
                instance.windunit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["windunit"])
                instance.pressureunit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pressureunit"])
                instance.feel_like_algo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["feel_like_algo"])
                return instance
            }
			

			// Decoder for NADate
            Decoders.addDecoder(clazz: NADate.self) { (source: AnyObject) -> NADate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NADate()
                instance.sec = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sec"])
                instance.usec = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["usec"])
                return instance
            }
			

			// Decoder for NADevice
            Decoders.addDecoder(clazz: NADevice.self) { (source: AnyObject) -> NADevice in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NADevice()
                instance._id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.behavior = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["behavior"])
                instance.cipher_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cipher_id"])
                instance.date_setup = Decoders.decodeOptional(clazz: NADate.self, source: sourceDictionary["date_setup"])
                instance.firmware = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["firmware"])
                instance.hw_version = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["hw_version"])
                instance.heating_system = Decoders.decodeOptional(clazz: NAHeatingSystem.self, source: sourceDictionary["heating_system"])
                instance.house_model = Decoders.decodeOptional(clazz: NAHouseModel.self, source: sourceDictionary["house_model"])
                instance.ip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ip"])
                instance.last_fw_update = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_fw_update"])
                instance.last_radio_store = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_radio_store"])
                instance.last_status_store = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_status_store"])
                instance.last_upgrade = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_upgrade"])
                instance.module_name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["module_name"])
                instance.modules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["modules"])
                instance.place = Decoders.decodeOptional(clazz: NAPlace.self, source: sourceDictionary["place"])
                instance.setpoint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["setpoint"])
                instance.setpoint_default_duration = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["setpoint_default_duration"])
                instance.setpoint_order = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["setpoint_order"])
                instance.public_ext_data = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["public_ext_data"])
                instance.station_name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["station_name"])
                instance.therm_program = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["therm_program"])
                instance.therm_program_backup = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["therm_program_backup"])
                instance.therm_program_order = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["therm_program_order"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.user_owner = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["user_owner"])
                instance.udp_conn = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["udp_conn"])
                instance.wifi_status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["wifi_status"])
                instance.new_feature_avail = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["new_feature_avail"])
                instance.first_pid_avail = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first_pid_avail"])
                instance.data_type = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data_type"])
                return instance
            }
			

			// Decoder for NAModule
            Decoders.addDecoder(clazz: NAModule.self) { (source: AnyObject) -> NAModule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAModule()
                instance._id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_id"])
                instance.date_setup = Decoders.decodeOptional(clazz: NADate.self, source: sourceDictionary["date_setup"])
                instance.firmware = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["firmware"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.module_name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["module_name"])
                instance.main_device = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["main_device"])
                instance.last_message = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_message"])
                instance.last_seen = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_seen"])
                instance.public_ext_data = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["public_ext_data"])
                instance.rf_status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["rf_status"])
                instance.battery_vp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["battery_vp"])
                instance.therm_orientation = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["therm_orientation"])
                instance.therm_relay_cmd = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["therm_relay_cmd"])
                instance.dashboard_data = Decoders.decodeOptional(clazz: NADashboardData.self, source: sourceDictionary["dashboard_data"])
                instance.data_type = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data_type"])
                return instance
            }
			

			// Decoder for NAHouseModel
            Decoders.addDecoder(clazz: NAHouseModel.self) { (source: AnyObject) -> NAHouseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAHouseModel()
                instance.algo_type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["algo_type"])
                instance.ca = Decoders.decodeOptional(clazz: NAHouseModelCa.self, source: sourceDictionary["ca"])
                instance.ext_temps = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["ext_temps"])
                instance.first_anticipate_avail = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first_anticipate_avail"])
                instance.first_pid_avail = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["first_pid_avail"])
                instance.gefs = Decoders.decodeOptional(clazz: NAStation.self, source: sourceDictionary["gefs"])
                instance.in_use = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["in_use"])
                instance.last_compute_try = Decoders.decodeOptional(clazz: NADate.self, source: sourceDictionary["last_compute_try"])
                instance.link_station = Decoders.decodeOptional(clazz: NALinkStation.self, source: sourceDictionary["link_station"])
                instance.pid_algo = Decoders.decodeOptional(clazz: NAPidAlgo.self, source: sourceDictionary["pid_algo"])
                instance.station = Decoders.decodeOptional(clazz: NAStation.self, source: sourceDictionary["station"])
                instance.prefered_algo_type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefered_algo_type"])
                instance.simple_algo = Decoders.decodeOptional(clazz: NASimpleAlgo.self, source: sourceDictionary["simple_algo"])
                instance.time = Decoders.decodeOptional(clazz: NADate.self, source: sourceDictionary["time"])
                instance.station_firsttime_anticipate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["station_firsttime_anticipate"])
                instance.time_algo_changed = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_algo_changed"])
                instance.time_pid_computed = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_pid_computed"])
                return instance
            }
			

			// Decoder for NAHouseModelCa
            Decoders.addDecoder(clazz: NAHouseModelCa.self) { (source: AnyObject) -> NAHouseModelCa in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAHouseModelCa()
                instance.te = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["te"])
                instance.ti = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["ti"])
                instance.so = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["so"])
                return instance
            }
			

			// Decoder for NAStation
            Decoders.addDecoder(clazz: NAStation.self) { (source: AnyObject) -> NAStation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAStation()
                instance.lag_down = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lag_down"])
                instance.lag_up = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lag_up"])
                instance.off_overshoot = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["off_overshoot"])
                instance.on_overshoot = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["on_overshoot"])
                instance.pk = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["pk"])
                instance.tau = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["tau"])
                return instance
            }
			

			// Decoder for NALinkStation
            Decoders.addDecoder(clazz: NALinkStation.self) { (source: AnyObject) -> NALinkStation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NALinkStation()
                instance.mac = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mac"])
                instance.ext = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ext"])
                instance.Temperature = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["Temperature"])
                return instance
            }
			

			// Decoder for NAPidAlgo
            Decoders.addDecoder(clazz: NAPidAlgo.self) { (source: AnyObject) -> NAPidAlgo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAPidAlgo()
                instance.gain = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["gain"])
                instance.period = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["period"])
                instance.td = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["td"])
                instance.ti = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["ti"])
                return instance
            }
			

			// Decoder for NAPlace
            Decoders.addDecoder(clazz: NAPlace.self) { (source: AnyObject) -> NAPlace in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAPlace()
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.altitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["altitude"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.from_ip = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["from_ip"])
                instance.improveLocProposed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["improveLocProposed"])
                instance.location = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["location"])
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                instance.trust_location = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["trust_location"])
                return instance
            }
			

			// Decoder for NASetpoint
            Decoders.addDecoder(clazz: NASetpoint.self) { (source: AnyObject) -> NASetpoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NASetpoint()
                instance.setpoint_temp = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["setpoint_temp"])
                instance.setpoint_endtime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["setpoint_endtime"])
                instance.setpoint_mode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["setpoint_mode"])
                return instance
            }
			

			// Decoder for NAThermProgram
            Decoders.addDecoder(clazz: NAThermProgram.self) { (source: AnyObject) -> NAThermProgram in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAThermProgram()
                instance.program_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["program_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.zones = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["zones"])
                instance.timetable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["timetable"])
                instance.selected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["selected"])
                return instance
            }
			

			// Decoder for NAZone
            Decoders.addDecoder(clazz: NAZone.self) { (source: AnyObject) -> NAZone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAZone()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.type = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.temp = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["temp"])
                return instance
            }
			

			// Decoder for NATimeTableItem
            Decoders.addDecoder(clazz: NATimeTableItem.self) { (source: AnyObject) -> NATimeTableItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NATimeTableItem()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.m_offset = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["m_offset"])
                return instance
            }
			

			// Decoder for NAHeatingSystem
            Decoders.addDecoder(clazz: NAHeatingSystem.self) { (source: AnyObject) -> NAHeatingSystem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAHeatingSystem()
                instance.heating_energy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["heating_energy"])
                instance.heating_system_window_seen = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["heating_system_window_seen"])
                return instance
            }
			

			// Decoder for NASimpleAlgo
            Decoders.addDecoder(clazz: NASimpleAlgo.self) { (source: AnyObject) -> NASimpleAlgo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NASimpleAlgo()
                instance.high_deadband = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["high_deadband"])
                return instance
            }
			

			// Decoder for NADashboardData
            Decoders.addDecoder(clazz: NADashboardData.self) { (source: AnyObject) -> NADashboardData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NADashboardData()
                instance.time_utc = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time_utc"])
                instance.device_id = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["device_id"])
                instance.BoilerOn = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["BoilerOn"])
                instance.BoilerOff = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["BoilerOff"])
                instance.Temperature = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["Temperature"])
                instance.date_max_temp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["date_max_temp"])
                instance.date_min_temp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["date_min_temp"])
                instance.min_temp = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["min_temp"])
                instance.max_temp = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["max_temp"])
                instance.AbsolutePressure = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["AbsolutePressure"])
                instance.CO2 = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["CO2"])
                instance.Humidity = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["Humidity"])
                instance.Noise = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["Noise"])
                instance.Pressure = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["Pressure"])
                instance.Rain = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["Rain"])
                instance.sum_rain_1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sum_rain_1"])
                instance.sum_rain_24 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sum_rain_24"])
                return instance
            }
			

			// Decoder for NAThermMeasure
            Decoders.addDecoder(clazz: NAThermMeasure.self) { (source: AnyObject) -> NAThermMeasure in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAThermMeasure()
                instance.time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time"])
                instance.temperature = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["temperature"])
                instance.setpoint_temp = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["setpoint_temp"])
                return instance
            }
			

			// Decoder for NAObject
            Decoders.addDecoder(clazz: NAObject.self) { (source: AnyObject) -> NAObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NAObject()
                instance.$id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["$id"])
                return instance
            }
			
        }
    }
}
