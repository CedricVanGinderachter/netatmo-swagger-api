<?php
/**
 * NAStation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NAStation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NAStation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'lag_down' => 'int',
        'lag_up' => 'int',
        'off_overshoot' => 'float',
        'on_overshoot' => 'float',
        'pk' => 'int',
        'tau' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'lag_down' => 'lag_down',
        'lag_up' => 'lag_up',
        'off_overshoot' => 'off_overshoot',
        'on_overshoot' => 'on_overshoot',
        'pk' => 'pk',
        'tau' => 'tau'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'lag_down' => 'setLagDown',
        'lag_up' => 'setLagUp',
        'off_overshoot' => 'setOffOvershoot',
        'on_overshoot' => 'setOnOvershoot',
        'pk' => 'setPk',
        'tau' => 'setTau'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'lag_down' => 'getLagDown',
        'lag_up' => 'getLagUp',
        'off_overshoot' => 'getOffOvershoot',
        'on_overshoot' => 'getOnOvershoot',
        'pk' => 'getPk',
        'tau' => 'getTau'
    );
  
    
    /**
      * $lag_down 
      * @var int
      */
    protected $lag_down;
    
    /**
      * $lag_up 
      * @var int
      */
    protected $lag_up;
    
    /**
      * $off_overshoot 
      * @var float
      */
    protected $off_overshoot;
    
    /**
      * $on_overshoot 
      * @var float
      */
    protected $on_overshoot;
    
    /**
      * $pk 
      * @var int
      */
    protected $pk;
    
    /**
      * $tau 
      * @var int
      */
    protected $tau;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->lag_down = $data["lag_down"];
            $this->lag_up = $data["lag_up"];
            $this->off_overshoot = $data["off_overshoot"];
            $this->on_overshoot = $data["on_overshoot"];
            $this->pk = $data["pk"];
            $this->tau = $data["tau"];
        }
    }
    
    /**
     * Gets lag_down
     * @return int
     */
    public function getLagDown()
    {
        return $this->lag_down;
    }
  
    /**
     * Sets lag_down
     * @param int $lag_down 
     * @return $this
     */
    public function setLagDown($lag_down)
    {
        
        $this->lag_down = $lag_down;
        return $this;
    }
    
    /**
     * Gets lag_up
     * @return int
     */
    public function getLagUp()
    {
        return $this->lag_up;
    }
  
    /**
     * Sets lag_up
     * @param int $lag_up 
     * @return $this
     */
    public function setLagUp($lag_up)
    {
        
        $this->lag_up = $lag_up;
        return $this;
    }
    
    /**
     * Gets off_overshoot
     * @return float
     */
    public function getOffOvershoot()
    {
        return $this->off_overshoot;
    }
  
    /**
     * Sets off_overshoot
     * @param float $off_overshoot 
     * @return $this
     */
    public function setOffOvershoot($off_overshoot)
    {
        
        $this->off_overshoot = $off_overshoot;
        return $this;
    }
    
    /**
     * Gets on_overshoot
     * @return float
     */
    public function getOnOvershoot()
    {
        return $this->on_overshoot;
    }
  
    /**
     * Sets on_overshoot
     * @param float $on_overshoot 
     * @return $this
     */
    public function setOnOvershoot($on_overshoot)
    {
        
        $this->on_overshoot = $on_overshoot;
        return $this;
    }
    
    /**
     * Gets pk
     * @return int
     */
    public function getPk()
    {
        return $this->pk;
    }
  
    /**
     * Sets pk
     * @param int $pk 
     * @return $this
     */
    public function setPk($pk)
    {
        
        $this->pk = $pk;
        return $this;
    }
    
    /**
     * Gets tau
     * @return int
     */
    public function getTau()
    {
        return $this->tau;
    }
  
    /**
     * Sets tau
     * @param int $tau 
     * @return $this
     */
    public function setTau($tau)
    {
        
        $this->tau = $tau;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
