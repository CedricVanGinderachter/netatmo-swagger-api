<?php
/**
 * NAModule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NAModule Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NAModule implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        '_id' => 'string',
        'date_setup' => '\Swagger\Client\Model\NADate',
        'firmware' => 'int',
        'type' => 'string',
        'module_name' => 'string',
        'main_device' => 'string',
        'last_message' => 'int',
        'last_seen' => 'int',
        'public_ext_data' => 'bool',
        'rf_status' => 'int',
        'battery_vp' => 'int',
        'therm_orientation' => 'int',
        'therm_relay_cmd' => 'int',
        'dashboard_data' => '\Swagger\Client\Model\NADashboardData',
        'data_type' => 'string[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        '_id' => '_id',
        'date_setup' => 'date_setup',
        'firmware' => 'firmware',
        'type' => 'type',
        'module_name' => 'module_name',
        'main_device' => 'main_device',
        'last_message' => 'last_message',
        'last_seen' => 'last_seen',
        'public_ext_data' => 'public_ext_data',
        'rf_status' => 'rf_status',
        'battery_vp' => 'battery_vp',
        'therm_orientation' => 'therm_orientation',
        'therm_relay_cmd' => 'therm_relay_cmd',
        'dashboard_data' => 'dashboard_data',
        'data_type' => 'data_type'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        '_id' => 'setId',
        'date_setup' => 'setDateSetup',
        'firmware' => 'setFirmware',
        'type' => 'setType',
        'module_name' => 'setModuleName',
        'main_device' => 'setMainDevice',
        'last_message' => 'setLastMessage',
        'last_seen' => 'setLastSeen',
        'public_ext_data' => 'setPublicExtData',
        'rf_status' => 'setRfStatus',
        'battery_vp' => 'setBatteryVp',
        'therm_orientation' => 'setThermOrientation',
        'therm_relay_cmd' => 'setThermRelayCmd',
        'dashboard_data' => 'setDashboardData',
        'data_type' => 'setDataType'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        '_id' => 'getId',
        'date_setup' => 'getDateSetup',
        'firmware' => 'getFirmware',
        'type' => 'getType',
        'module_name' => 'getModuleName',
        'main_device' => 'getMainDevice',
        'last_message' => 'getLastMessage',
        'last_seen' => 'getLastSeen',
        'public_ext_data' => 'getPublicExtData',
        'rf_status' => 'getRfStatus',
        'battery_vp' => 'getBatteryVp',
        'therm_orientation' => 'getThermOrientation',
        'therm_relay_cmd' => 'getThermRelayCmd',
        'dashboard_data' => 'getDashboardData',
        'data_type' => 'getDataType'
    );
  
    
    /**
      * $_id 
      * @var string
      */
    protected $_id;
    
    /**
      * $date_setup 
      * @var \Swagger\Client\Model\NADate
      */
    protected $date_setup;
    
    /**
      * $firmware 
      * @var int
      */
    protected $firmware;
    
    /**
      * $type Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module
      * @var string
      */
    protected $type;
    
    /**
      * $module_name 
      * @var string
      */
    protected $module_name;
    
    /**
      * $main_device 
      * @var string
      */
    protected $main_device;
    
    /**
      * $last_message 
      * @var int
      */
    protected $last_message;
    
    /**
      * $last_seen 
      * @var int
      */
    protected $last_seen;
    
    /**
      * $public_ext_data 
      * @var bool
      */
    protected $public_ext_data;
    
    /**
      * $rf_status \"It contains the current radio status. The different thresholds to take into account are :\" |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60
      * @var int
      */
    protected $rf_status;
    
    /**
      * $battery_vp It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n\"Indoor module Battery range: 6000 ... 4200\" |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n\"Below 4560: very low\" |\n  \n\"Raingauge and outdoor module Battery range: 6000 ... 3600\" |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n\"Below 4000: very low\" |\n  \n\"Thermostat Battery range: 4500 ... 3000\" |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\"Below 3000: very low\"
      * @var int
      */
    protected $battery_vp;
    
    /**
      * $therm_orientation 
      * @var int
      */
    protected $therm_orientation;
    
    /**
      * $therm_relay_cmd 
      * @var int
      */
    protected $therm_relay_cmd;
    
    /**
      * $dashboard_data It contains all the measurements that can be displayed on the dashboard
      * @var \Swagger\Client\Model\NADashboardData
      */
    protected $dashboard_data;
    
    /**
      * $data_type 
      * @var string[]
      */
    protected $data_type;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->_id = $data["_id"];
            $this->date_setup = $data["date_setup"];
            $this->firmware = $data["firmware"];
            $this->type = $data["type"];
            $this->module_name = $data["module_name"];
            $this->main_device = $data["main_device"];
            $this->last_message = $data["last_message"];
            $this->last_seen = $data["last_seen"];
            $this->public_ext_data = $data["public_ext_data"];
            $this->rf_status = $data["rf_status"];
            $this->battery_vp = $data["battery_vp"];
            $this->therm_orientation = $data["therm_orientation"];
            $this->therm_relay_cmd = $data["therm_relay_cmd"];
            $this->dashboard_data = $data["dashboard_data"];
            $this->data_type = $data["data_type"];
        }
    }
    
    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->_id;
    }
  
    /**
     * Sets _id
     * @param string $_id 
     * @return $this
     */
    public function setId($_id)
    {
        
        $this->_id = $_id;
        return $this;
    }
    
    /**
     * Gets date_setup
     * @return \Swagger\Client\Model\NADate
     */
    public function getDateSetup()
    {
        return $this->date_setup;
    }
  
    /**
     * Sets date_setup
     * @param \Swagger\Client\Model\NADate $date_setup 
     * @return $this
     */
    public function setDateSetup($date_setup)
    {
        
        $this->date_setup = $date_setup;
        return $this;
    }
    
    /**
     * Gets firmware
     * @return int
     */
    public function getFirmware()
    {
        return $this->firmware;
    }
  
    /**
     * Sets firmware
     * @param int $firmware 
     * @return $this
     */
    public function setFirmware($firmware)
    {
        
        $this->firmware = $firmware;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets module_name
     * @return string
     */
    public function getModuleName()
    {
        return $this->module_name;
    }
  
    /**
     * Sets module_name
     * @param string $module_name 
     * @return $this
     */
    public function setModuleName($module_name)
    {
        
        $this->module_name = $module_name;
        return $this;
    }
    
    /**
     * Gets main_device
     * @return string
     */
    public function getMainDevice()
    {
        return $this->main_device;
    }
  
    /**
     * Sets main_device
     * @param string $main_device 
     * @return $this
     */
    public function setMainDevice($main_device)
    {
        
        $this->main_device = $main_device;
        return $this;
    }
    
    /**
     * Gets last_message
     * @return int
     */
    public function getLastMessage()
    {
        return $this->last_message;
    }
  
    /**
     * Sets last_message
     * @param int $last_message 
     * @return $this
     */
    public function setLastMessage($last_message)
    {
        
        $this->last_message = $last_message;
        return $this;
    }
    
    /**
     * Gets last_seen
     * @return int
     */
    public function getLastSeen()
    {
        return $this->last_seen;
    }
  
    /**
     * Sets last_seen
     * @param int $last_seen 
     * @return $this
     */
    public function setLastSeen($last_seen)
    {
        
        $this->last_seen = $last_seen;
        return $this;
    }
    
    /**
     * Gets public_ext_data
     * @return bool
     */
    public function getPublicExtData()
    {
        return $this->public_ext_data;
    }
  
    /**
     * Sets public_ext_data
     * @param bool $public_ext_data 
     * @return $this
     */
    public function setPublicExtData($public_ext_data)
    {
        
        $this->public_ext_data = $public_ext_data;
        return $this;
    }
    
    /**
     * Gets rf_status
     * @return int
     */
    public function getRfStatus()
    {
        return $this->rf_status;
    }
  
    /**
     * Sets rf_status
     * @param int $rf_status \"It contains the current radio status. The different thresholds to take into account are :\" |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60
     * @return $this
     */
    public function setRfStatus($rf_status)
    {
        
        $this->rf_status = $rf_status;
        return $this;
    }
    
    /**
     * Gets battery_vp
     * @return int
     */
    public function getBatteryVp()
    {
        return $this->battery_vp;
    }
  
    /**
     * Sets battery_vp
     * @param int $battery_vp It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n\"Indoor module Battery range: 6000 ... 4200\" |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n\"Below 4560: very low\" |\n  \n\"Raingauge and outdoor module Battery range: 6000 ... 3600\" |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n\"Below 4000: very low\" |\n  \n\"Thermostat Battery range: 4500 ... 3000\" |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\"Below 3000: very low\"
     * @return $this
     */
    public function setBatteryVp($battery_vp)
    {
        
        $this->battery_vp = $battery_vp;
        return $this;
    }
    
    /**
     * Gets therm_orientation
     * @return int
     */
    public function getThermOrientation()
    {
        return $this->therm_orientation;
    }
  
    /**
     * Sets therm_orientation
     * @param int $therm_orientation 
     * @return $this
     */
    public function setThermOrientation($therm_orientation)
    {
        
        $this->therm_orientation = $therm_orientation;
        return $this;
    }
    
    /**
     * Gets therm_relay_cmd
     * @return int
     */
    public function getThermRelayCmd()
    {
        return $this->therm_relay_cmd;
    }
  
    /**
     * Sets therm_relay_cmd
     * @param int $therm_relay_cmd 
     * @return $this
     */
    public function setThermRelayCmd($therm_relay_cmd)
    {
        
        $this->therm_relay_cmd = $therm_relay_cmd;
        return $this;
    }
    
    /**
     * Gets dashboard_data
     * @return \Swagger\Client\Model\NADashboardData
     */
    public function getDashboardData()
    {
        return $this->dashboard_data;
    }
  
    /**
     * Sets dashboard_data
     * @param \Swagger\Client\Model\NADashboardData $dashboard_data It contains all the measurements that can be displayed on the dashboard
     * @return $this
     */
    public function setDashboardData($dashboard_data)
    {
        
        $this->dashboard_data = $dashboard_data;
        return $this;
    }
    
    /**
     * Gets data_type
     * @return string[]
     */
    public function getDataType()
    {
        return $this->data_type;
    }
  
    /**
     * Sets data_type
     * @param string[] $data_type 
     * @return $this
     */
    public function setDataType($data_type)
    {
        
        $this->data_type = $data_type;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
