<?php
/**
 * NAUserAdministrative
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NAUserAdministrative Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NAUserAdministrative implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'country' => 'string',
        'lang' => 'string',
        'reg_locale' => 'string',
        'unit' => 'string',
        'windunit' => 'string',
        'pressureunit' => 'string',
        'feel_like_algo' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'country' => 'country',
        'lang' => 'lang',
        'reg_locale' => 'reg_locale',
        'unit' => 'unit',
        'windunit' => 'windunit',
        'pressureunit' => 'pressureunit',
        'feel_like_algo' => 'feel_like_algo'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'country' => 'setCountry',
        'lang' => 'setLang',
        'reg_locale' => 'setRegLocale',
        'unit' => 'setUnit',
        'windunit' => 'setWindunit',
        'pressureunit' => 'setPressureunit',
        'feel_like_algo' => 'setFeelLikeAlgo'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'country' => 'getCountry',
        'lang' => 'getLang',
        'reg_locale' => 'getRegLocale',
        'unit' => 'getUnit',
        'windunit' => 'getWindunit',
        'pressureunit' => 'getPressureunit',
        'feel_like_algo' => 'getFeelLikeAlgo'
    );
  
    
    /**
      * $country user country
      * @var string
      */
    protected $country;
    
    /**
      * $lang user locale
      * @var string
      */
    protected $lang;
    
    /**
      * $reg_locale user regional preferences (used for displaying date)
      * @var string
      */
    protected $reg_locale;
    
    /**
      * $unit 0 -> metric system, 1 -> imperial system
      * @var string
      */
    protected $unit;
    
    /**
      * $windunit 0 -> kph, 1 -> mph, 2 -> ms, 3 -> beaufort, 4 -> knot
      * @var string
      */
    protected $windunit;
    
    /**
      * $pressureunit 0 -> mbar, 1 -> inHg, 2 -> mmHg
      * @var string
      */
    protected $pressureunit;
    
    /**
      * $feel_like_algo algorithm used to compute feel like temperature, 0 -> humidex, 1 -> heat-index
      * @var string
      */
    protected $feel_like_algo;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->country = $data["country"];
            $this->lang = $data["lang"];
            $this->reg_locale = $data["reg_locale"];
            $this->unit = $data["unit"];
            $this->windunit = $data["windunit"];
            $this->pressureunit = $data["pressureunit"];
            $this->feel_like_algo = $data["feel_like_algo"];
        }
    }
    
    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }
  
    /**
     * Sets country
     * @param string $country user country
     * @return $this
     */
    public function setCountry($country)
    {
        
        $this->country = $country;
        return $this;
    }
    
    /**
     * Gets lang
     * @return string
     */
    public function getLang()
    {
        return $this->lang;
    }
  
    /**
     * Sets lang
     * @param string $lang user locale
     * @return $this
     */
    public function setLang($lang)
    {
        
        $this->lang = $lang;
        return $this;
    }
    
    /**
     * Gets reg_locale
     * @return string
     */
    public function getRegLocale()
    {
        return $this->reg_locale;
    }
  
    /**
     * Sets reg_locale
     * @param string $reg_locale user regional preferences (used for displaying date)
     * @return $this
     */
    public function setRegLocale($reg_locale)
    {
        
        $this->reg_locale = $reg_locale;
        return $this;
    }
    
    /**
     * Gets unit
     * @return string
     */
    public function getUnit()
    {
        return $this->unit;
    }
  
    /**
     * Sets unit
     * @param string $unit 0 -> metric system, 1 -> imperial system
     * @return $this
     */
    public function setUnit($unit)
    {
        
        $this->unit = $unit;
        return $this;
    }
    
    /**
     * Gets windunit
     * @return string
     */
    public function getWindunit()
    {
        return $this->windunit;
    }
  
    /**
     * Sets windunit
     * @param string $windunit 0 -> kph, 1 -> mph, 2 -> ms, 3 -> beaufort, 4 -> knot
     * @return $this
     */
    public function setWindunit($windunit)
    {
        
        $this->windunit = $windunit;
        return $this;
    }
    
    /**
     * Gets pressureunit
     * @return string
     */
    public function getPressureunit()
    {
        return $this->pressureunit;
    }
  
    /**
     * Sets pressureunit
     * @param string $pressureunit 0 -> mbar, 1 -> inHg, 2 -> mmHg
     * @return $this
     */
    public function setPressureunit($pressureunit)
    {
        
        $this->pressureunit = $pressureunit;
        return $this;
    }
    
    /**
     * Gets feel_like_algo
     * @return string
     */
    public function getFeelLikeAlgo()
    {
        return $this->feel_like_algo;
    }
  
    /**
     * Sets feel_like_algo
     * @param string $feel_like_algo algorithm used to compute feel like temperature, 0 -> humidex, 1 -> heat-index
     * @return $this
     */
    public function setFeelLikeAlgo($feel_like_algo)
    {
        
        $this->feel_like_algo = $feel_like_algo;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
