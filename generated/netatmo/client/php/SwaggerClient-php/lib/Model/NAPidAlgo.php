<?php
/**
 * NAPidAlgo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * NAPidAlgo Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NAPidAlgo implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'gain' => 'int',
        'period' => 'int',
        'td' => 'int',
        'ti' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'gain' => 'gain',
        'period' => 'period',
        'td' => 'td',
        'ti' => 'ti'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'gain' => 'setGain',
        'period' => 'setPeriod',
        'td' => 'setTd',
        'ti' => 'setTi'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'gain' => 'getGain',
        'period' => 'getPeriod',
        'td' => 'getTd',
        'ti' => 'getTi'
    );
  
    
    /**
      * $gain 
      * @var int
      */
    protected $gain;
    
    /**
      * $period 
      * @var int
      */
    protected $period;
    
    /**
      * $td 
      * @var int
      */
    protected $td;
    
    /**
      * $ti 
      * @var int
      */
    protected $ti;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->gain = $data["gain"];
            $this->period = $data["period"];
            $this->td = $data["td"];
            $this->ti = $data["ti"];
        }
    }
    
    /**
     * Gets gain
     * @return int
     */
    public function getGain()
    {
        return $this->gain;
    }
  
    /**
     * Sets gain
     * @param int $gain 
     * @return $this
     */
    public function setGain($gain)
    {
        
        $this->gain = $gain;
        return $this;
    }
    
    /**
     * Gets period
     * @return int
     */
    public function getPeriod()
    {
        return $this->period;
    }
  
    /**
     * Sets period
     * @param int $period 
     * @return $this
     */
    public function setPeriod($period)
    {
        
        $this->period = $period;
        return $this;
    }
    
    /**
     * Gets td
     * @return int
     */
    public function getTd()
    {
        return $this->td;
    }
  
    /**
     * Sets td
     * @param int $td 
     * @return $this
     */
    public function setTd($td)
    {
        
        $this->td = $td;
        return $this;
    }
    
    /**
     * Gets ti
     * @return int
     */
    public function getTi()
    {
        return $this->ti;
    }
  
    /**
     * Sets ti
     * @param int $ti 
     * @return $this
     */
    public function setTi($ti)
    {
        
        $this->ti = $ti;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
