# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NAStation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NAStation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lag_down': 'int',
            'lag_up': 'int',
            'off_overshoot': 'float',
            'on_overshoot': 'float',
            'pk': 'int',
            'tau': 'int'
        }

        self.attribute_map = {
            'lag_down': 'lag_down',
            'lag_up': 'lag_up',
            'off_overshoot': 'off_overshoot',
            'on_overshoot': 'on_overshoot',
            'pk': 'pk',
            'tau': 'tau'
        }

        self._lag_down = None
        self._lag_up = None
        self._off_overshoot = None
        self._on_overshoot = None
        self._pk = None
        self._tau = None

    @property
    def lag_down(self):
        """
        Gets the lag_down of this NAStation.


        :return: The lag_down of this NAStation.
        :rtype: int
        """
        return self._lag_down

    @lag_down.setter
    def lag_down(self, lag_down):
        """
        Sets the lag_down of this NAStation.


        :param lag_down: The lag_down of this NAStation.
        :type: int
        """
        self._lag_down = lag_down

    @property
    def lag_up(self):
        """
        Gets the lag_up of this NAStation.


        :return: The lag_up of this NAStation.
        :rtype: int
        """
        return self._lag_up

    @lag_up.setter
    def lag_up(self, lag_up):
        """
        Sets the lag_up of this NAStation.


        :param lag_up: The lag_up of this NAStation.
        :type: int
        """
        self._lag_up = lag_up

    @property
    def off_overshoot(self):
        """
        Gets the off_overshoot of this NAStation.


        :return: The off_overshoot of this NAStation.
        :rtype: float
        """
        return self._off_overshoot

    @off_overshoot.setter
    def off_overshoot(self, off_overshoot):
        """
        Sets the off_overshoot of this NAStation.


        :param off_overshoot: The off_overshoot of this NAStation.
        :type: float
        """
        self._off_overshoot = off_overshoot

    @property
    def on_overshoot(self):
        """
        Gets the on_overshoot of this NAStation.


        :return: The on_overshoot of this NAStation.
        :rtype: float
        """
        return self._on_overshoot

    @on_overshoot.setter
    def on_overshoot(self, on_overshoot):
        """
        Sets the on_overshoot of this NAStation.


        :param on_overshoot: The on_overshoot of this NAStation.
        :type: float
        """
        self._on_overshoot = on_overshoot

    @property
    def pk(self):
        """
        Gets the pk of this NAStation.


        :return: The pk of this NAStation.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """
        Sets the pk of this NAStation.


        :param pk: The pk of this NAStation.
        :type: int
        """
        self._pk = pk

    @property
    def tau(self):
        """
        Gets the tau of this NAStation.


        :return: The tau of this NAStation.
        :rtype: int
        """
        return self._tau

    @tau.setter
    def tau(self, tau):
        """
        Sets the tau of this NAStation.


        :param tau: The tau of this NAStation.
        :type: int
        """
        self._tau = tau

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
