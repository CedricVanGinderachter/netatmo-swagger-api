# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NADashboardData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NADashboardData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'time_utc': 'int',
            'device_id': 'float',
            'boiler_on': 'int',
            'boiler_off': 'int',
            'temperature': 'float',
            'date_max_temp': 'int',
            'date_min_temp': 'int',
            'min_temp': 'float',
            'max_temp': 'float',
            'absolute_pressure': 'float',
            'co2': 'float',
            'humidity': 'float',
            'noise': 'float',
            'pressure': 'float',
            'rain': 'int',
            'sum_rain_1': 'int',
            'sum_rain_24': 'int'
        }

        self.attribute_map = {
            'time_utc': 'time_utc',
            'device_id': 'device_id',
            'boiler_on': 'BoilerOn',
            'boiler_off': 'BoilerOff',
            'temperature': 'Temperature',
            'date_max_temp': 'date_max_temp',
            'date_min_temp': 'date_min_temp',
            'min_temp': 'min_temp',
            'max_temp': 'max_temp',
            'absolute_pressure': 'AbsolutePressure',
            'co2': 'CO2',
            'humidity': 'Humidity',
            'noise': 'Noise',
            'pressure': 'Pressure',
            'rain': 'Rain',
            'sum_rain_1': 'sum_rain_1',
            'sum_rain_24': 'sum_rain_24'
        }

        self._time_utc = None
        self._device_id = None
        self._boiler_on = None
        self._boiler_off = None
        self._temperature = None
        self._date_max_temp = None
        self._date_min_temp = None
        self._min_temp = None
        self._max_temp = None
        self._absolute_pressure = None
        self._co2 = None
        self._humidity = None
        self._noise = None
        self._pressure = None
        self._rain = None
        self._sum_rain_1 = None
        self._sum_rain_24 = None

    @property
    def time_utc(self):
        """
        Gets the time_utc of this NADashboardData.


        :return: The time_utc of this NADashboardData.
        :rtype: int
        """
        return self._time_utc

    @time_utc.setter
    def time_utc(self, time_utc):
        """
        Sets the time_utc of this NADashboardData.


        :param time_utc: The time_utc of this NADashboardData.
        :type: int
        """
        self._time_utc = time_utc

    @property
    def device_id(self):
        """
        Gets the device_id of this NADashboardData.


        :return: The device_id of this NADashboardData.
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this NADashboardData.


        :param device_id: The device_id of this NADashboardData.
        :type: float
        """
        self._device_id = device_id

    @property
    def boiler_on(self):
        """
        Gets the boiler_on of this NADashboardData.


        :return: The boiler_on of this NADashboardData.
        :rtype: int
        """
        return self._boiler_on

    @boiler_on.setter
    def boiler_on(self, boiler_on):
        """
        Sets the boiler_on of this NADashboardData.


        :param boiler_on: The boiler_on of this NADashboardData.
        :type: int
        """
        self._boiler_on = boiler_on

    @property
    def boiler_off(self):
        """
        Gets the boiler_off of this NADashboardData.


        :return: The boiler_off of this NADashboardData.
        :rtype: int
        """
        return self._boiler_off

    @boiler_off.setter
    def boiler_off(self, boiler_off):
        """
        Sets the boiler_off of this NADashboardData.


        :param boiler_off: The boiler_off of this NADashboardData.
        :type: int
        """
        self._boiler_off = boiler_off

    @property
    def temperature(self):
        """
        Gets the temperature of this NADashboardData.
        Last temperature measure @ time_utc (in °C)

        :return: The temperature of this NADashboardData.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """
        Sets the temperature of this NADashboardData.
        Last temperature measure @ time_utc (in °C)

        :param temperature: The temperature of this NADashboardData.
        :type: float
        """
        self._temperature = temperature

    @property
    def date_max_temp(self):
        """
        Gets the date_max_temp of this NADashboardData.
        Timestamp when max temperature was measured

        :return: The date_max_temp of this NADashboardData.
        :rtype: int
        """
        return self._date_max_temp

    @date_max_temp.setter
    def date_max_temp(self, date_max_temp):
        """
        Sets the date_max_temp of this NADashboardData.
        Timestamp when max temperature was measured

        :param date_max_temp: The date_max_temp of this NADashboardData.
        :type: int
        """
        self._date_max_temp = date_max_temp

    @property
    def date_min_temp(self):
        """
        Gets the date_min_temp of this NADashboardData.
        Timestamp when min temperature was measured

        :return: The date_min_temp of this NADashboardData.
        :rtype: int
        """
        return self._date_min_temp

    @date_min_temp.setter
    def date_min_temp(self, date_min_temp):
        """
        Sets the date_min_temp of this NADashboardData.
        Timestamp when min temperature was measured

        :param date_min_temp: The date_min_temp of this NADashboardData.
        :type: int
        """
        self._date_min_temp = date_min_temp

    @property
    def min_temp(self):
        """
        Gets the min_temp of this NADashboardData.
        Max temperature of the day (measured @ date_max_temp)

        :return: The min_temp of this NADashboardData.
        :rtype: float
        """
        return self._min_temp

    @min_temp.setter
    def min_temp(self, min_temp):
        """
        Sets the min_temp of this NADashboardData.
        Max temperature of the day (measured @ date_max_temp)

        :param min_temp: The min_temp of this NADashboardData.
        :type: float
        """
        self._min_temp = min_temp

    @property
    def max_temp(self):
        """
        Gets the max_temp of this NADashboardData.
        Min temperature of the day (measured @ date_min_temp)

        :return: The max_temp of this NADashboardData.
        :rtype: float
        """
        return self._max_temp

    @max_temp.setter
    def max_temp(self, max_temp):
        """
        Sets the max_temp of this NADashboardData.
        Min temperature of the day (measured @ date_min_temp)

        :param max_temp: The max_temp of this NADashboardData.
        :type: float
        """
        self._max_temp = max_temp

    @property
    def absolute_pressure(self):
        """
        Gets the absolute_pressure of this NADashboardData.
        Real measured pressure @ time_utc (in mb)

        :return: The absolute_pressure of this NADashboardData.
        :rtype: float
        """
        return self._absolute_pressure

    @absolute_pressure.setter
    def absolute_pressure(self, absolute_pressure):
        """
        Sets the absolute_pressure of this NADashboardData.
        Real measured pressure @ time_utc (in mb)

        :param absolute_pressure: The absolute_pressure of this NADashboardData.
        :type: float
        """
        self._absolute_pressure = absolute_pressure

    @property
    def co2(self):
        """
        Gets the co2 of this NADashboardData.
        Last Co2 measured @ time_utc (in ppm)

        :return: The co2 of this NADashboardData.
        :rtype: float
        """
        return self._co2

    @co2.setter
    def co2(self, co2):
        """
        Sets the co2 of this NADashboardData.
        Last Co2 measured @ time_utc (in ppm)

        :param co2: The co2 of this NADashboardData.
        :type: float
        """
        self._co2 = co2

    @property
    def humidity(self):
        """
        Gets the humidity of this NADashboardData.
        Last humidity measured @ time_utc (in %)

        :return: The humidity of this NADashboardData.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """
        Sets the humidity of this NADashboardData.
        Last humidity measured @ time_utc (in %)

        :param humidity: The humidity of this NADashboardData.
        :type: float
        """
        self._humidity = humidity

    @property
    def noise(self):
        """
        Gets the noise of this NADashboardData.
        Last noise measured @ time_utc (in db)

        :return: The noise of this NADashboardData.
        :rtype: float
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """
        Sets the noise of this NADashboardData.
        Last noise measured @ time_utc (in db)

        :param noise: The noise of this NADashboardData.
        :type: float
        """
        self._noise = noise

    @property
    def pressure(self):
        """
        Gets the pressure of this NADashboardData.
        Last Sea level pressure measured @ time_utc (in mb)

        :return: The pressure of this NADashboardData.
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """
        Sets the pressure of this NADashboardData.
        Last Sea level pressure measured @ time_utc (in mb)

        :param pressure: The pressure of this NADashboardData.
        :type: float
        """
        self._pressure = pressure

    @property
    def rain(self):
        """
        Gets the rain of this NADashboardData.
        Last rain measured (in mm)

        :return: The rain of this NADashboardData.
        :rtype: int
        """
        return self._rain

    @rain.setter
    def rain(self, rain):
        """
        Sets the rain of this NADashboardData.
        Last rain measured (in mm)

        :param rain: The rain of this NADashboardData.
        :type: int
        """
        self._rain = rain

    @property
    def sum_rain_1(self):
        """
        Gets the sum_rain_1 of this NADashboardData.
        Amount of rain in last hour

        :return: The sum_rain_1 of this NADashboardData.
        :rtype: int
        """
        return self._sum_rain_1

    @sum_rain_1.setter
    def sum_rain_1(self, sum_rain_1):
        """
        Sets the sum_rain_1 of this NADashboardData.
        Amount of rain in last hour

        :param sum_rain_1: The sum_rain_1 of this NADashboardData.
        :type: int
        """
        self._sum_rain_1 = sum_rain_1

    @property
    def sum_rain_24(self):
        """
        Gets the sum_rain_24 of this NADashboardData.
        Amount of rain today

        :return: The sum_rain_24 of this NADashboardData.
        :rtype: int
        """
        return self._sum_rain_24

    @sum_rain_24.setter
    def sum_rain_24(self, sum_rain_24):
        """
        Sets the sum_rain_24 of this NADashboardData.
        Amount of rain today

        :param sum_rain_24: The sum_rain_24 of this NADashboardData.
        :type: int
        """
        self._sum_rain_24 = sum_rain_24

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
