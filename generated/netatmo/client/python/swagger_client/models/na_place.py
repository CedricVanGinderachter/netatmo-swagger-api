# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NAPlace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NAPlace - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'city': 'str',
            'altitude': 'float',
            'country': 'str',
            'from_ip': 'bool',
            'improve_loc_proposed': 'bool',
            'location': 'list[float]',
            'timezone': 'str',
            'trust_location': 'bool'
        }

        self.attribute_map = {
            'city': 'city',
            'altitude': 'altitude',
            'country': 'country',
            'from_ip': 'from_ip',
            'improve_loc_proposed': 'improveLocProposed',
            'location': 'location',
            'timezone': 'timezone',
            'trust_location': 'trust_location'
        }

        self._city = None
        self._altitude = None
        self._country = None
        self._from_ip = None
        self._improve_loc_proposed = None
        self._location = None
        self._timezone = None
        self._trust_location = None

    @property
    def city(self):
        """
        Gets the city of this NAPlace.


        :return: The city of this NAPlace.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this NAPlace.


        :param city: The city of this NAPlace.
        :type: str
        """
        self._city = city

    @property
    def altitude(self):
        """
        Gets the altitude of this NAPlace.


        :return: The altitude of this NAPlace.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """
        Sets the altitude of this NAPlace.


        :param altitude: The altitude of this NAPlace.
        :type: float
        """
        self._altitude = altitude

    @property
    def country(self):
        """
        Gets the country of this NAPlace.


        :return: The country of this NAPlace.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this NAPlace.


        :param country: The country of this NAPlace.
        :type: str
        """
        self._country = country

    @property
    def from_ip(self):
        """
        Gets the from_ip of this NAPlace.


        :return: The from_ip of this NAPlace.
        :rtype: bool
        """
        return self._from_ip

    @from_ip.setter
    def from_ip(self, from_ip):
        """
        Sets the from_ip of this NAPlace.


        :param from_ip: The from_ip of this NAPlace.
        :type: bool
        """
        self._from_ip = from_ip

    @property
    def improve_loc_proposed(self):
        """
        Gets the improve_loc_proposed of this NAPlace.


        :return: The improve_loc_proposed of this NAPlace.
        :rtype: bool
        """
        return self._improve_loc_proposed

    @improve_loc_proposed.setter
    def improve_loc_proposed(self, improve_loc_proposed):
        """
        Sets the improve_loc_proposed of this NAPlace.


        :param improve_loc_proposed: The improve_loc_proposed of this NAPlace.
        :type: bool
        """
        self._improve_loc_proposed = improve_loc_proposed

    @property
    def location(self):
        """
        Gets the location of this NAPlace.


        :return: The location of this NAPlace.
        :rtype: list[float]
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this NAPlace.


        :param location: The location of this NAPlace.
        :type: list[float]
        """
        self._location = location

    @property
    def timezone(self):
        """
        Gets the timezone of this NAPlace.


        :return: The timezone of this NAPlace.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this NAPlace.


        :param timezone: The timezone of this NAPlace.
        :type: str
        """
        self._timezone = timezone

    @property
    def trust_location(self):
        """
        Gets the trust_location of this NAPlace.


        :return: The trust_location of this NAPlace.
        :rtype: bool
        """
        return self._trust_location

    @trust_location.setter
    def trust_location(self, trust_location):
        """
        Sets the trust_location of this NAPlace.


        :param trust_location: The trust_location of this NAPlace.
        :type: bool
        """
        self._trust_location = trust_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
