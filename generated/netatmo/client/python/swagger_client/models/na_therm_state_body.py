# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NAThermStateBody(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NAThermStateBody - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'setpoint': 'NASetpoint',
            'setpoint_order': 'NASetpoint',
            'therm_program': 'NAThermProgram',
            'therm_program_backup': 'list[NAThermProgram]',
            'therm_program_order': 'NAThermProgram',
            'therm_orientation': 'int',
            'therm_relay_cmd': 'int',
            'battery_vp': 'int',
            'rf_status': 'int',
            'plug_connected_boiler': 'bool',
            'udp_conn': 'bool',
            'last_therm_seen': 'int',
            'last_plug_seen': 'int',
            'wifi_status': 'int',
            'measured': 'NAThermMeasure'
        }

        self.attribute_map = {
            'setpoint': 'setpoint',
            'setpoint_order': 'setpoint_order',
            'therm_program': 'therm_program',
            'therm_program_backup': 'therm_program_backup',
            'therm_program_order': 'therm_program_order',
            'therm_orientation': 'therm_orientation',
            'therm_relay_cmd': 'therm_relay_cmd',
            'battery_vp': 'battery_vp',
            'rf_status': 'rf_status',
            'plug_connected_boiler': 'plug_connected_boiler',
            'udp_conn': 'udp_conn',
            'last_therm_seen': 'last_therm_seen',
            'last_plug_seen': 'last_plug_seen',
            'wifi_status': 'wifi_status',
            'measured': 'measured'
        }

        self._setpoint = None
        self._setpoint_order = None
        self._therm_program = None
        self._therm_program_backup = None
        self._therm_program_order = None
        self._therm_orientation = None
        self._therm_relay_cmd = None
        self._battery_vp = None
        self._rf_status = None
        self._plug_connected_boiler = None
        self._udp_conn = None
        self._last_therm_seen = None
        self._last_plug_seen = None
        self._wifi_status = None
        self._measured = None

    @property
    def setpoint(self):
        """
        Gets the setpoint of this NAThermStateBody.


        :return: The setpoint of this NAThermStateBody.
        :rtype: NASetpoint
        """
        return self._setpoint

    @setpoint.setter
    def setpoint(self, setpoint):
        """
        Sets the setpoint of this NAThermStateBody.


        :param setpoint: The setpoint of this NAThermStateBody.
        :type: NASetpoint
        """
        self._setpoint = setpoint

    @property
    def setpoint_order(self):
        """
        Gets the setpoint_order of this NAThermStateBody.


        :return: The setpoint_order of this NAThermStateBody.
        :rtype: NASetpoint
        """
        return self._setpoint_order

    @setpoint_order.setter
    def setpoint_order(self, setpoint_order):
        """
        Sets the setpoint_order of this NAThermStateBody.


        :param setpoint_order: The setpoint_order of this NAThermStateBody.
        :type: NASetpoint
        """
        self._setpoint_order = setpoint_order

    @property
    def therm_program(self):
        """
        Gets the therm_program of this NAThermStateBody.


        :return: The therm_program of this NAThermStateBody.
        :rtype: NAThermProgram
        """
        return self._therm_program

    @therm_program.setter
    def therm_program(self, therm_program):
        """
        Sets the therm_program of this NAThermStateBody.


        :param therm_program: The therm_program of this NAThermStateBody.
        :type: NAThermProgram
        """
        self._therm_program = therm_program

    @property
    def therm_program_backup(self):
        """
        Gets the therm_program_backup of this NAThermStateBody.


        :return: The therm_program_backup of this NAThermStateBody.
        :rtype: list[NAThermProgram]
        """
        return self._therm_program_backup

    @therm_program_backup.setter
    def therm_program_backup(self, therm_program_backup):
        """
        Sets the therm_program_backup of this NAThermStateBody.


        :param therm_program_backup: The therm_program_backup of this NAThermStateBody.
        :type: list[NAThermProgram]
        """
        self._therm_program_backup = therm_program_backup

    @property
    def therm_program_order(self):
        """
        Gets the therm_program_order of this NAThermStateBody.


        :return: The therm_program_order of this NAThermStateBody.
        :rtype: NAThermProgram
        """
        return self._therm_program_order

    @therm_program_order.setter
    def therm_program_order(self, therm_program_order):
        """
        Sets the therm_program_order of this NAThermStateBody.


        :param therm_program_order: The therm_program_order of this NAThermStateBody.
        :type: NAThermProgram
        """
        self._therm_program_order = therm_program_order

    @property
    def therm_orientation(self):
        """
        Gets the therm_orientation of this NAThermStateBody.


        :return: The therm_orientation of this NAThermStateBody.
        :rtype: int
        """
        return self._therm_orientation

    @therm_orientation.setter
    def therm_orientation(self, therm_orientation):
        """
        Sets the therm_orientation of this NAThermStateBody.


        :param therm_orientation: The therm_orientation of this NAThermStateBody.
        :type: int
        """
        self._therm_orientation = therm_orientation

    @property
    def therm_relay_cmd(self):
        """
        Gets the therm_relay_cmd of this NAThermStateBody.


        :return: The therm_relay_cmd of this NAThermStateBody.
        :rtype: int
        """
        return self._therm_relay_cmd

    @therm_relay_cmd.setter
    def therm_relay_cmd(self, therm_relay_cmd):
        """
        Sets the therm_relay_cmd of this NAThermStateBody.


        :param therm_relay_cmd: The therm_relay_cmd of this NAThermStateBody.
        :type: int
        """
        self._therm_relay_cmd = therm_relay_cmd

    @property
    def battery_vp(self):
        """
        Gets the battery_vp of this NAThermStateBody.


        :return: The battery_vp of this NAThermStateBody.
        :rtype: int
        """
        return self._battery_vp

    @battery_vp.setter
    def battery_vp(self, battery_vp):
        """
        Sets the battery_vp of this NAThermStateBody.


        :param battery_vp: The battery_vp of this NAThermStateBody.
        :type: int
        """
        self._battery_vp = battery_vp

    @property
    def rf_status(self):
        """
        Gets the rf_status of this NAThermStateBody.


        :return: The rf_status of this NAThermStateBody.
        :rtype: int
        """
        return self._rf_status

    @rf_status.setter
    def rf_status(self, rf_status):
        """
        Sets the rf_status of this NAThermStateBody.


        :param rf_status: The rf_status of this NAThermStateBody.
        :type: int
        """
        self._rf_status = rf_status

    @property
    def plug_connected_boiler(self):
        """
        Gets the plug_connected_boiler of this NAThermStateBody.


        :return: The plug_connected_boiler of this NAThermStateBody.
        :rtype: bool
        """
        return self._plug_connected_boiler

    @plug_connected_boiler.setter
    def plug_connected_boiler(self, plug_connected_boiler):
        """
        Sets the plug_connected_boiler of this NAThermStateBody.


        :param plug_connected_boiler: The plug_connected_boiler of this NAThermStateBody.
        :type: bool
        """
        self._plug_connected_boiler = plug_connected_boiler

    @property
    def udp_conn(self):
        """
        Gets the udp_conn of this NAThermStateBody.


        :return: The udp_conn of this NAThermStateBody.
        :rtype: bool
        """
        return self._udp_conn

    @udp_conn.setter
    def udp_conn(self, udp_conn):
        """
        Sets the udp_conn of this NAThermStateBody.


        :param udp_conn: The udp_conn of this NAThermStateBody.
        :type: bool
        """
        self._udp_conn = udp_conn

    @property
    def last_therm_seen(self):
        """
        Gets the last_therm_seen of this NAThermStateBody.


        :return: The last_therm_seen of this NAThermStateBody.
        :rtype: int
        """
        return self._last_therm_seen

    @last_therm_seen.setter
    def last_therm_seen(self, last_therm_seen):
        """
        Sets the last_therm_seen of this NAThermStateBody.


        :param last_therm_seen: The last_therm_seen of this NAThermStateBody.
        :type: int
        """
        self._last_therm_seen = last_therm_seen

    @property
    def last_plug_seen(self):
        """
        Gets the last_plug_seen of this NAThermStateBody.


        :return: The last_plug_seen of this NAThermStateBody.
        :rtype: int
        """
        return self._last_plug_seen

    @last_plug_seen.setter
    def last_plug_seen(self, last_plug_seen):
        """
        Sets the last_plug_seen of this NAThermStateBody.


        :param last_plug_seen: The last_plug_seen of this NAThermStateBody.
        :type: int
        """
        self._last_plug_seen = last_plug_seen

    @property
    def wifi_status(self):
        """
        Gets the wifi_status of this NAThermStateBody.


        :return: The wifi_status of this NAThermStateBody.
        :rtype: int
        """
        return self._wifi_status

    @wifi_status.setter
    def wifi_status(self, wifi_status):
        """
        Sets the wifi_status of this NAThermStateBody.


        :param wifi_status: The wifi_status of this NAThermStateBody.
        :type: int
        """
        self._wifi_status = wifi_status

    @property
    def measured(self):
        """
        Gets the measured of this NAThermStateBody.


        :return: The measured of this NAThermStateBody.
        :rtype: NAThermMeasure
        """
        return self._measured

    @measured.setter
    def measured(self, measured):
        """
        Sets the measured of this NAThermStateBody.


        :param measured: The measured of this NAThermStateBody.
        :type: NAThermMeasure
        """
        self._measured = measured

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
