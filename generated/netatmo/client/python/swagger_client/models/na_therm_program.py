# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NAThermProgram(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NAThermProgram - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'program_id': 'str',
            'name': 'str',
            'zones': 'list[NAZone]',
            'timetable': 'list[NATimeTableItem]',
            'selected': 'bool'
        }

        self.attribute_map = {
            'program_id': 'program_id',
            'name': 'name',
            'zones': 'zones',
            'timetable': 'timetable',
            'selected': 'selected'
        }

        self._program_id = None
        self._name = None
        self._zones = None
        self._timetable = None
        self._selected = None

    @property
    def program_id(self):
        """
        Gets the program_id of this NAThermProgram.


        :return: The program_id of this NAThermProgram.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """
        Sets the program_id of this NAThermProgram.


        :param program_id: The program_id of this NAThermProgram.
        :type: str
        """
        self._program_id = program_id

    @property
    def name(self):
        """
        Gets the name of this NAThermProgram.


        :return: The name of this NAThermProgram.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NAThermProgram.


        :param name: The name of this NAThermProgram.
        :type: str
        """
        self._name = name

    @property
    def zones(self):
        """
        Gets the zones of this NAThermProgram.


        :return: The zones of this NAThermProgram.
        :rtype: list[NAZone]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """
        Sets the zones of this NAThermProgram.


        :param zones: The zones of this NAThermProgram.
        :type: list[NAZone]
        """
        self._zones = zones

    @property
    def timetable(self):
        """
        Gets the timetable of this NAThermProgram.


        :return: The timetable of this NAThermProgram.
        :rtype: list[NATimeTableItem]
        """
        return self._timetable

    @timetable.setter
    def timetable(self, timetable):
        """
        Sets the timetable of this NAThermProgram.


        :param timetable: The timetable of this NAThermProgram.
        :type: list[NATimeTableItem]
        """
        self._timetable = timetable

    @property
    def selected(self):
        """
        Gets the selected of this NAThermProgram.


        :return: The selected of this NAThermProgram.
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """
        Sets the selected of this NAThermProgram.


        :param selected: The selected of this NAThermProgram.
        :type: bool
        """
        self._selected = selected

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
