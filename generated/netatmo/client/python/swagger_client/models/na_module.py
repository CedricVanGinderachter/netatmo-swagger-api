# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NAModule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NAModule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'date_setup': 'NADate',
            'firmware': 'int',
            'type': 'str',
            'module_name': 'str',
            'main_device': 'str',
            'last_message': 'int',
            'last_seen': 'int',
            'public_ext_data': 'bool',
            'rf_status': 'int',
            'battery_vp': 'int',
            'therm_orientation': 'int',
            'therm_relay_cmd': 'int',
            'dashboard_data': 'NADashboardData',
            'data_type': 'list[str]'
        }

        self.attribute_map = {
            'id': '_id',
            'date_setup': 'date_setup',
            'firmware': 'firmware',
            'type': 'type',
            'module_name': 'module_name',
            'main_device': 'main_device',
            'last_message': 'last_message',
            'last_seen': 'last_seen',
            'public_ext_data': 'public_ext_data',
            'rf_status': 'rf_status',
            'battery_vp': 'battery_vp',
            'therm_orientation': 'therm_orientation',
            'therm_relay_cmd': 'therm_relay_cmd',
            'dashboard_data': 'dashboard_data',
            'data_type': 'data_type'
        }

        self._id = None
        self._date_setup = None
        self._firmware = None
        self._type = None
        self._module_name = None
        self._main_device = None
        self._last_message = None
        self._last_seen = None
        self._public_ext_data = None
        self._rf_status = None
        self._battery_vp = None
        self._therm_orientation = None
        self._therm_relay_cmd = None
        self._dashboard_data = None
        self._data_type = None

    @property
    def id(self):
        """
        Gets the id of this NAModule.


        :return: The id of this NAModule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NAModule.


        :param id: The id of this NAModule.
        :type: str
        """
        self._id = id

    @property
    def date_setup(self):
        """
        Gets the date_setup of this NAModule.


        :return: The date_setup of this NAModule.
        :rtype: NADate
        """
        return self._date_setup

    @date_setup.setter
    def date_setup(self, date_setup):
        """
        Sets the date_setup of this NAModule.


        :param date_setup: The date_setup of this NAModule.
        :type: NADate
        """
        self._date_setup = date_setup

    @property
    def firmware(self):
        """
        Gets the firmware of this NAModule.


        :return: The firmware of this NAModule.
        :rtype: int
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """
        Sets the firmware of this NAModule.


        :param firmware: The firmware of this NAModule.
        :type: int
        """
        self._firmware = firmware

    @property
    def type(self):
        """
        Gets the type of this NAModule.
        Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module

        :return: The type of this NAModule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this NAModule.
        Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module

        :param type: The type of this NAModule.
        :type: str
        """
        self._type = type

    @property
    def module_name(self):
        """
        Gets the module_name of this NAModule.


        :return: The module_name of this NAModule.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """
        Sets the module_name of this NAModule.


        :param module_name: The module_name of this NAModule.
        :type: str
        """
        self._module_name = module_name

    @property
    def main_device(self):
        """
        Gets the main_device of this NAModule.


        :return: The main_device of this NAModule.
        :rtype: str
        """
        return self._main_device

    @main_device.setter
    def main_device(self, main_device):
        """
        Sets the main_device of this NAModule.


        :param main_device: The main_device of this NAModule.
        :type: str
        """
        self._main_device = main_device

    @property
    def last_message(self):
        """
        Gets the last_message of this NAModule.


        :return: The last_message of this NAModule.
        :rtype: int
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """
        Sets the last_message of this NAModule.


        :param last_message: The last_message of this NAModule.
        :type: int
        """
        self._last_message = last_message

    @property
    def last_seen(self):
        """
        Gets the last_seen of this NAModule.


        :return: The last_seen of this NAModule.
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """
        Sets the last_seen of this NAModule.


        :param last_seen: The last_seen of this NAModule.
        :type: int
        """
        self._last_seen = last_seen

    @property
    def public_ext_data(self):
        """
        Gets the public_ext_data of this NAModule.


        :return: The public_ext_data of this NAModule.
        :rtype: bool
        """
        return self._public_ext_data

    @public_ext_data.setter
    def public_ext_data(self, public_ext_data):
        """
        Sets the public_ext_data of this NAModule.


        :param public_ext_data: The public_ext_data of this NAModule.
        :type: bool
        """
        self._public_ext_data = public_ext_data

    @property
    def rf_status(self):
        """
        Gets the rf_status of this NAModule.
        \"It contains the current radio status. The different thresholds to take into account are :\" |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60

        :return: The rf_status of this NAModule.
        :rtype: int
        """
        return self._rf_status

    @rf_status.setter
    def rf_status(self, rf_status):
        """
        Sets the rf_status of this NAModule.
        \"It contains the current radio status. The different thresholds to take into account are :\" |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60

        :param rf_status: The rf_status of this NAModule.
        :type: int
        """
        self._rf_status = rf_status

    @property
    def battery_vp(self):
        """
        Gets the battery_vp of this NAModule.
        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n\"Indoor module Battery range: 6000 ... 4200\" |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n\"Below 4560: very low\" |\n  \n\"Raingauge and outdoor module Battery range: 6000 ... 3600\" |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n\"Below 4000: very low\" |\n  \n\"Thermostat Battery range: 4500 ... 3000\" |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\"Below 3000: very low\"

        :return: The battery_vp of this NAModule.
        :rtype: int
        """
        return self._battery_vp

    @battery_vp.setter
    def battery_vp(self, battery_vp):
        """
        Sets the battery_vp of this NAModule.
        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n\"Indoor module Battery range: 6000 ... 4200\" |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n\"Below 4560: very low\" |\n  \n\"Raingauge and outdoor module Battery range: 6000 ... 3600\" |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n\"Below 4000: very low\" |\n  \n\"Thermostat Battery range: 4500 ... 3000\" |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\"Below 3000: very low\"

        :param battery_vp: The battery_vp of this NAModule.
        :type: int
        """
        self._battery_vp = battery_vp

    @property
    def therm_orientation(self):
        """
        Gets the therm_orientation of this NAModule.


        :return: The therm_orientation of this NAModule.
        :rtype: int
        """
        return self._therm_orientation

    @therm_orientation.setter
    def therm_orientation(self, therm_orientation):
        """
        Sets the therm_orientation of this NAModule.


        :param therm_orientation: The therm_orientation of this NAModule.
        :type: int
        """
        self._therm_orientation = therm_orientation

    @property
    def therm_relay_cmd(self):
        """
        Gets the therm_relay_cmd of this NAModule.


        :return: The therm_relay_cmd of this NAModule.
        :rtype: int
        """
        return self._therm_relay_cmd

    @therm_relay_cmd.setter
    def therm_relay_cmd(self, therm_relay_cmd):
        """
        Sets the therm_relay_cmd of this NAModule.


        :param therm_relay_cmd: The therm_relay_cmd of this NAModule.
        :type: int
        """
        self._therm_relay_cmd = therm_relay_cmd

    @property
    def dashboard_data(self):
        """
        Gets the dashboard_data of this NAModule.
        It contains all the measurements that can be displayed on the dashboard

        :return: The dashboard_data of this NAModule.
        :rtype: NADashboardData
        """
        return self._dashboard_data

    @dashboard_data.setter
    def dashboard_data(self, dashboard_data):
        """
        Sets the dashboard_data of this NAModule.
        It contains all the measurements that can be displayed on the dashboard

        :param dashboard_data: The dashboard_data of this NAModule.
        :type: NADashboardData
        """
        self._dashboard_data = dashboard_data

    @property
    def data_type(self):
        """
        Gets the data_type of this NAModule.


        :return: The data_type of this NAModule.
        :rtype: list[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """
        Sets the data_type of this NAModule.


        :param data_type: The data_type of this NAModule.
        :type: list[str]
        """
        self._data_type = data_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
