# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AccessToken(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AccessToken - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_token': 'str',
            'refresh_token': 'str',
            'expire_in': 'int',
            'expires_in': 'int',
            'scope': 'list[str]'
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'refresh_token': 'refresh_token',
            'expire_in': 'expire_in',
            'expires_in': 'expires_in',
            'scope': 'scope'
        }

        self._access_token = None
        self._refresh_token = None
        self._expire_in = None
        self._expires_in = None
        self._scope = None

    @property
    def access_token(self):
        """
        Gets the access_token of this AccessToken.


        :return: The access_token of this AccessToken.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this AccessToken.


        :param access_token: The access_token of this AccessToken.
        :type: str
        """
        self._access_token = access_token

    @property
    def refresh_token(self):
        """
        Gets the refresh_token of this AccessToken.


        :return: The refresh_token of this AccessToken.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """
        Sets the refresh_token of this AccessToken.


        :param refresh_token: The refresh_token of this AccessToken.
        :type: str
        """
        self._refresh_token = refresh_token

    @property
    def expire_in(self):
        """
        Gets the expire_in of this AccessToken.


        :return: The expire_in of this AccessToken.
        :rtype: int
        """
        return self._expire_in

    @expire_in.setter
    def expire_in(self, expire_in):
        """
        Sets the expire_in of this AccessToken.


        :param expire_in: The expire_in of this AccessToken.
        :type: int
        """
        self._expire_in = expire_in

    @property
    def expires_in(self):
        """
        Gets the expires_in of this AccessToken.


        :return: The expires_in of this AccessToken.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """
        Sets the expires_in of this AccessToken.


        :param expires_in: The expires_in of this AccessToken.
        :type: int
        """
        self._expires_in = expires_in

    @property
    def scope(self):
        """
        Gets the scope of this AccessToken.


        :return: The scope of this AccessToken.
        :rtype: list[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this AccessToken.


        :param scope: The scope of this AccessToken.
        :type: list[str]
        """
        self._scope = scope

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
