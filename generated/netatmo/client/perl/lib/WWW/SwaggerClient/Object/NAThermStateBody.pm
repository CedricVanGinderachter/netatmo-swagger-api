package WWW::SwaggerClient::Object::NAThermStateBody;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base "WWW::SwaggerClient::Object::BaseObject";

#
#
#
#NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
#

my $swagger_types = {
    'setpoint' => 'NASetpoint',
    'setpoint_order' => 'NASetpoint',
    'therm_program' => 'NAThermProgram',
    'therm_program_backup' => 'ARRAY[NAThermProgram]',
    'therm_program_order' => 'NAThermProgram',
    'therm_orientation' => 'int',
    'therm_relay_cmd' => 'int',
    'battery_vp' => 'int',
    'rf_status' => 'int',
    'plug_connected_boiler' => 'boolean',
    'udp_conn' => 'boolean',
    'last_therm_seen' => 'int',
    'last_plug_seen' => 'int',
    'wifi_status' => 'int',
    'measured' => 'NAThermMeasure'
};

my $attribute_map = {
    'setpoint' => 'setpoint',
    'setpoint_order' => 'setpoint_order',
    'therm_program' => 'therm_program',
    'therm_program_backup' => 'therm_program_backup',
    'therm_program_order' => 'therm_program_order',
    'therm_orientation' => 'therm_orientation',
    'therm_relay_cmd' => 'therm_relay_cmd',
    'battery_vp' => 'battery_vp',
    'rf_status' => 'rf_status',
    'plug_connected_boiler' => 'plug_connected_boiler',
    'udp_conn' => 'udp_conn',
    'last_therm_seen' => 'last_therm_seen',
    'last_plug_seen' => 'last_plug_seen',
    'wifi_status' => 'wifi_status',
    'measured' => 'measured'
};

# new object
sub new { 
    my ($class, %args) = @_; 
    my $self = { 
        #
        'setpoint' => $args{'setpoint'}, 
        #
        'setpoint_order' => $args{'setpoint_order'}, 
        #
        'therm_program' => $args{'therm_program'}, 
        #
        'therm_program_backup' => $args{'therm_program_backup'}, 
        #
        'therm_program_order' => $args{'therm_program_order'}, 
        #
        'therm_orientation' => $args{'therm_orientation'}, 
        #
        'therm_relay_cmd' => $args{'therm_relay_cmd'}, 
        #
        'battery_vp' => $args{'battery_vp'}, 
        #
        'rf_status' => $args{'rf_status'}, 
        #
        'plug_connected_boiler' => $args{'plug_connected_boiler'}, 
        #
        'udp_conn' => $args{'udp_conn'}, 
        #
        'last_therm_seen' => $args{'last_therm_seen'}, 
        #
        'last_plug_seen' => $args{'last_plug_seen'}, 
        #
        'wifi_status' => $args{'wifi_status'}, 
        #
        'measured' => $args{'measured'}
    }; 

    return bless $self, $class; 
}  

# get swagger type of the attribute
sub get_swagger_types {
    return $swagger_types;
}

# get attribute mappping
sub get_attribute_map {
    return $attribute_map;
}

1;
