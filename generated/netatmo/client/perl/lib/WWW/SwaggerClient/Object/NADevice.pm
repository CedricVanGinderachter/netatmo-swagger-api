package WWW::SwaggerClient::Object::NADevice;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base "WWW::SwaggerClient::Object::BaseObject";

#
#
#
#NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
#

my $swagger_types = {
    '_id' => 'string',
    'behavior' => 'int',
    'cipher_id' => 'string',
    'date_setup' => 'NADate',
    'firmware' => 'int',
    'hw_version' => 'int',
    'heating_system' => 'NAHeatingSystem',
    'house_model' => 'NAHouseModel',
    'ip' => 'string',
    'last_fw_update' => 'int',
    'last_radio_store' => 'int',
    'last_status_store' => 'int',
    'last_upgrade' => 'int',
    'module_name' => 'string',
    'modules' => 'ARRAY[string]',
    'place' => 'NAPlace',
    'setpoint' => 'object',
    'setpoint_default_duration' => 'int',
    'setpoint_order' => 'HASH[string,ARRAY[NAObject]]',
    'public_ext_data' => 'boolean',
    'station_name' => 'string',
    'therm_program' => 'HASH[string,NAThermProgram]',
    'therm_program_backup' => 'HASH[string,ARRAY[NAThermProgram]]',
    'therm_program_order' => 'HASH[string,ARRAY[NAObject]]',
    'type' => 'string',
    'user_owner' => 'ARRAY[string]',
    'udp_conn' => 'boolean',
    'wifi_status' => 'int',
    'new_feature_avail' => 'boolean',
    'first_pid_avail' => 'boolean',
    'data_type' => 'ARRAY[string]'
};

my $attribute_map = {
    '_id' => '_id',
    'behavior' => 'behavior',
    'cipher_id' => 'cipher_id',
    'date_setup' => 'date_setup',
    'firmware' => 'firmware',
    'hw_version' => 'hw_version',
    'heating_system' => 'heating_system',
    'house_model' => 'house_model',
    'ip' => 'ip',
    'last_fw_update' => 'last_fw_update',
    'last_radio_store' => 'last_radio_store',
    'last_status_store' => 'last_status_store',
    'last_upgrade' => 'last_upgrade',
    'module_name' => 'module_name',
    'modules' => 'modules',
    'place' => 'place',
    'setpoint' => 'setpoint',
    'setpoint_default_duration' => 'setpoint_default_duration',
    'setpoint_order' => 'setpoint_order',
    'public_ext_data' => 'public_ext_data',
    'station_name' => 'station_name',
    'therm_program' => 'therm_program',
    'therm_program_backup' => 'therm_program_backup',
    'therm_program_order' => 'therm_program_order',
    'type' => 'type',
    'user_owner' => 'user_owner',
    'udp_conn' => 'udp_conn',
    'wifi_status' => 'wifi_status',
    'new_feature_avail' => 'new_feature_avail',
    'first_pid_avail' => 'first_pid_avail',
    'data_type' => 'data_type'
};

# new object
sub new { 
    my ($class, %args) = @_; 
    my $self = { 
        #
        '_id' => $args{'_id'}, 
        #
        'behavior' => $args{'behavior'}, 
        #
        'cipher_id' => $args{'cipher_id'}, 
        #
        'date_setup' => $args{'date_setup'}, 
        #
        'firmware' => $args{'firmware'}, 
        #
        'hw_version' => $args{'hw_version'}, 
        #
        'heating_system' => $args{'heating_system'}, 
        #
        'house_model' => $args{'house_model'}, 
        #
        'ip' => $args{'ip'}, 
        #
        'last_fw_update' => $args{'last_fw_update'}, 
        #
        'last_radio_store' => $args{'last_radio_store'}, 
        #
        'last_status_store' => $args{'last_status_store'}, 
        #
        'last_upgrade' => $args{'last_upgrade'}, 
        #
        'module_name' => $args{'module_name'}, 
        #It lists which modules are linked with this device
        'modules' => $args{'modules'}, 
        #
        'place' => $args{'place'}, 
        #
        'setpoint' => $args{'setpoint'}, 
        #
        'setpoint_default_duration' => $args{'setpoint_default_duration'}, 
        #
        'setpoint_order' => $args{'setpoint_order'}, 
        #
        'public_ext_data' => $args{'public_ext_data'}, 
        #
        'station_name' => $args{'station_name'}, 
        #
        'therm_program' => $args{'therm_program'}, 
        #
        'therm_program_backup' => $args{'therm_program_backup'}, 
        #
        'therm_program_order' => $args{'therm_program_order'}, 
        #Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module
        'type' => $args{'type'}, 
        #
        'user_owner' => $args{'user_owner'}, 
        #
        'udp_conn' => $args{'udp_conn'}, 
        #It contains the current wifi status. The different thresholds to take into account are\nRSSI_THRESHOLD_0 = 86 bad signal\nRSSI_THRESHOLD_1 = 71 middle quality signal\nRSSI_THRESHOLD_2 = 56 good signal
        'wifi_status' => $args{'wifi_status'}, 
        #
        'new_feature_avail' => $args{'new_feature_avail'}, 
        #
        'first_pid_avail' => $args{'first_pid_avail'}, 
        #
        'data_type' => $args{'data_type'}
    }; 

    return bless $self, $class; 
}  

# get swagger type of the attribute
sub get_swagger_types {
    return $swagger_types;
}

# get attribute mappping
sub get_attribute_map {
    return $attribute_map;
}

1;
